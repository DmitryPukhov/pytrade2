#!/bin/bash

# Read and automatically export env variables
set -a
source .env
source common_lib.sh
ensure_namespace
set +a

# Global vars
PROJECT_DIR=../..
DEPLOY_ENV_PATH="$PROJECT_DIR/minikube.env"
TMP_DIR="$PROJECT_DIR/deploy/k8s/tmp"
VALUES_YAML_PATH="$TMP_DIR/values.yaml"
TAG="pytrade2"
REGISTRY=$(minikube ip):5000
PUSH_TAG="$REGISTRY/$TAG"
NAMESPACE="pytrade2"
APP_NAME="pytrade2"

function build_push_pytrade2(){
  # Build
  echo "Building docker: $TAG"
  #eval $(minikube docker-env)
  cd $PROJECT_DIR
  docker build -t $TAG .

  # Push
  echo "Pushing docker image to $PUSH_TAG"
  docker tag $TAG $PUSH_TAG
  docker push "$PUSH_TAG"
  cd "$OLDPWD"
  echo "Pushed"
}

function push_pytrade2(){
  # Push
  echo "Pushing docker image to $PUSH_TAG"
  docker tag $TAG $PUSH_TAG
  docker push "$PUSH_TAG"
  cd "$OLDPWD"
  echo "Pushed"
}


function build_pytrade2(){
  # Build
  echo "Building docker: $TAG"
  #eval $(minikube docker-env)
  cd $PROJECT_DIR
  docker build -t $TAG .
  cd "$OLDPWD"
}

# pytrade2 app deployment

#!/bin/bash
function create_chart_values(){
  mkdir -p $(dirname $VALUES_YAML_PATH)

  # Проверка наличия файла pytrade2.env
  if [ ! -f "$DEPLOY_ENV_PATH" ]; then
    echo "File not found: $DEPLOY_ENV_PATH"
    exit 1
  fi

  # Создаем файл values.yaml
  echo "# Auto-generated by script from $DEPLOY_ENV_PATH" > $VALUES_YAML_PATH

  # Читаем файл построчно и обрабатываем каждую строку
  while IFS='=' read -r key value; do
    echo $key
    # Пропускаем комментарии и пустые строки
    if [[ -z "$key" || $key =~ ^\s*#.*$ ]]; then
      continue
    fi
    echo "ok"

    # Экранируем значение от возможных символов, которые могут нарушить формат YAML
    value="${value//\"/\\\"}"

    # Записываем строку в файл
    echo "$key: \"$value\"" >> $VALUES_YAML_PATH
  done < $DEPLOY_ENV_PATH

  echo "Created successfully: $VALUES_YAML_PATH"
}

function redeploy_pytrade2_chart(){
  app_name="pytrade2"
  eval $(minikube docker-env)
  # Delete old
  set +e
  helm delete $app_name
  set -e
  # Install new
  echo "Installing $app_name with values: $VALUES_YAML_PATH"
  helm install $app_name ./pytrade2 -f "$VALUES_YAML_PATH"
}

###############
# main
###############
# Exit on error
set -e

build_push_pytrade2
create_chart_values
push_pytrade2
redeploy_pytrade2_chart